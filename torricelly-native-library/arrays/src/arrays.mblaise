module arrays;

procedure swap(a: array<integer>[], from_index: integer, to_index: integer);
var
   temp: integer;
begin
   temp := a[from_index];
   a[from_index] := a[to_index];
   a[to_index] := temp;
end;

procedure swap(a: array<char>[], from_index: integer, to_index: integer);
var
   temp: char;
begin
   temp := a[from_index];
   a[from_index] := a[to_index];
   a[to_index] := temp;
end;

procedure swap(a: array<boolean>[], from_index: integer, to_index: integer);
var
   temp: boolean;
begin
   temp := a[from_index];
   a[from_index] := a[to_index];
   a[to_index] := temp;
end;

procedure swap(a: array<float>[], from_index: integer, to_index: integer);
var
   temp: float;
begin
   temp := a[from_index];
   a[from_index] := a[to_index];
   a[to_index] := temp;
end;

procedure swap(a: array<double>[], from_index: integer, to_index: integer);
var
   temp: double;
begin
   temp := a[from_index];
   a[from_index] := a[to_index];
   a[to_index] := temp;
end;

function count(a: array<integer>[], size: integer, value: integer) : integer;
var index: integer;
begin
   count := 0;
   for index from 0 to (size-1) begin
     count := count + (if (a[index] == value) then 1 else 0);
   end;
end;

function count(a: array<boolean>[], size: integer, value: boolean) : integer;
var index: integer;
begin
   count := 0;
   for index from 0 to (size-1) begin
     count := count + (if (a[index] == value) then 1 else 0);
   end;
end;

function count(a: array<char>[], size: integer, value: char) : integer;
var index: integer;
begin
   count := 0;
   for index from 0 to (size-1) begin
     count := count + (if (a[index] == value) then 1 else 0);
   end;
end;

function count(a: array<float>[], size: integer, value: float) : integer;
var index: integer;
begin
   count := 0;
   for index from 0 to (size-1) begin
     count := count + (if (a[index] == value) then 1 else 0);
   end;
end;

function count(a: array<double>[], size: integer, value: double) : integer;
var index: integer;
begin
   count := 0;
   for index from 0 to (size-1) begin
     count := count + (if (a[index] == value) then 1 else 0);
   end;
end;

function indexof(a: array<integer>[], size: integer, value: integer) : integer;
var index: integer;
    found: boolean;
begin
   indexof := -1;
   found := false;
   index := 0;
   while ((index < size) and (not found)) begin
      if value == a[index] then begin
         indexof := index;
         found := true;
      end;
      index := index + 1;
   end;
end;

function indexof(a: array<boolean>[], size: integer, value: boolean) : integer;
var index: integer;
    found: boolean;
begin
   indexof := -1;
   found := false;
   index := 0;
   while ((index < size) and (not found)) begin
      if value == a[index] then begin
         indexof := index;
         found := true;
      end;
      index := index + 1;
   end;
end;

procedure native print(a: array<integer>[], size: integer, separator: char);
procedure native print(a: array<char>[], size: integer, separator: char);
procedure native print(a: array<boolean>[], size: integer, separator: char);
procedure native print(a: array<float>[], size: integer, separator: char);
procedure native print(a: array<double>[], size: integer, separator: char);

end.